@Library('my-shared-library') _

pipeline{
  
  agent any

  parameters{

    choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy')
    string(name: 'aws_account_id', description: "AWS ACCOUNT ID", defaultValue: '089826821991')
    string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-south-1')
    string(name: 'ecr_repoName', description: "Name of the ECR", defaultValue: 'madhaviraj')
    }

   
  stages{
   
    stage('Git Checkout'){
       
       when { expression { params.action == 'create' } }

       steps{
         gitCheckout(
             branch: "main",
             url: "https://github.com/madhavi33/project.git"

         )
      }
    }

    stage('Unit Test Mvn'){
      
     when { expression { params.action == 'create' } }

      steps{
        script{
           
             mvnTest()
         }
      }
    }
   
    stage('mvn integartion test'){
      
      when { expression { params.action == 'create' } }
      
      steps{
        script{

            mvnIntegrationTest()

          }
        }
    }


    stage('Static Code Analysis'){

      when{ expression { params.action == 'create' } }

      steps{
        script{
            
            def SonarQubecredentialsId = 'sonarqube-api'
            staticCodeAnalysis(SonarQubecredentialsId)
       }
      }  
    }


    stage('Quality Gate Status check : sonarqube'){

     when{ expression { params.action == 'create' } }

     steps{
        script{
            def SonarQubecredentialsId = 'sonarqube-api'
            qualityGateStatus(SonarQubecredentialsId)
      }
     }
    }

    
     stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
        stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        } 



  }

}